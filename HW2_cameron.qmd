---
title: "Functions-Iterations-Dates-purr"
format: html
editor: visual
---

## Instructions

Complete the following exercises using the `lubridate` and `purrr` packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

## Exercise Functions:

### Question 1

Write a function (using r code and structure demonstrated in class) to calculate a z score for a given observed value, a mean, and a standard deviation value. And then use your function to find a z score for the following problem. (Research the internet to find the formula used to calculate a z score)\
Observed value = 25.77, mean = 23.54, standard deviation = 2.442

z-score for the problem = .91

```{r}
library(lubridate)
library(purrr)
```

```{r}
#function that will give the z score equation

z_score <- function(x, mean, sd) {(x - mean) / sd}
```

```{r}
#using the function with the given problem
z_score(x = 25.77, mean = 23.54, sd = 2.442)
```

### Question 2

Write a function to calculate the natural log of a number multiplied by the common log of the same number divided by the cube root of a given prime number, $\dfrac{\ln x \times \log x }{\sqrt[3]{p}}$.\
Use your function to find the answer if the number to be used for both log expressions is 32 and the given prime number is 11, $x = 32, \;\;p=11$.\
Also use R code to round your answer to the nearest tenth

answer= 2.3

```{r}
#function that satisfies the prompt given

log_equation <- function(x,p) {log(x) * log10(x)/ p^(1/3)}
```

```{r}
#using the function with the given problem

log_equation(x= 32, p= 11)

round(2.345548, 1)
```

### Question 3

Use and show R coding to calculate the standard deviation for each variable of the data table `mtcars` using the `Special For Loop Method`, which includes three components:

- Output â€“ an object to store the results

- Sequence â€“ the set of items to loop through

- Body â€“ the operations performed in each iteration

```{r}
data(mtcars)
```

```{r}
#output component, stores the standard deviations 
std_devs <- numeric(ncol(mtcars))

#gives a name to each item in std_devs so that the sd is labeled with the corresponding column name 
names(std_devs) <- colnames(mtcars)

#sequence component, loops through each variable in mtcars
for (var in colnames(mtcars)) 

  #body component, finds the standard deviation for a given column
  {  std_devs[var] <- sd(mtcars[[var]])}

#returns the standard deviations
std_devs

```

### Question 4:
Write only one line of the code to return only the leap years fo years 2024, 3021, 2000 or 1800, 800, 5050, 600 and 7156.  using subsetting with `[]` and without using built-in functions.

```{r}
years <- c(2024, 3021, 2000, 1800, 800, 5050, 600, 7156)

#leap year rules: the year is divisible by 4 and not divisible by 100 or the year is divisible by 400
years[ (years %% 4 == 0 & years %% 100 != 0) | (years %% 400 == 0)]

```

## Advanced Date Manipulation with lubridate

### Question 5:

Generate a sequence of dates from **January 1, 2015** to **December 31, 2025**, spaced by every **two months**. Extract the **year**, **quarter**, and **ISO week number** for each date.

```{r}
#sequece of dates given the time frame spaced by every two months 
date_seq <- seq(ymd("2015-01-01"), ymd("2025-12-31"), by = "2 months")

#extracts the year, quarter, and ISO week # for each date in the sequence
year_vals    <- year(date_seq)
quarter_vals <- quarter(date_seq)
iso_week_vals <- isoweek(date_seq)

#puts the variables into an organized data frame for easier readability 
date_info <- data.frame(date= date_seq, year= year_vals, quarter= quarter_vals, iso_week = iso_week_vals)

head(date_info, 10)
```





### Question 6:

Given the following dates, compute the difference in **months** and **weeks** between each consecutive pair.

``` r
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
```

### Question 7: Higher-Order Functions with purrr

Using `map()` and `map_dbl()`, compute the **mean**, **median**, and **standard deviation** for each numeric vector in the following list:

``` r
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))
```



### Question 8: Combining lubridate and purrr

Given a list of mixed date formats, use `map()` and `possibly()` from `purrr` to safely convert them to **Date** format and extract the **month name**.

``` r
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
```


## Submission

* Save your Quarto file after completing each problem, render it, then stage and commit the changes.\

* Include well-commented code and clear explanations.\

* Make at least **one commit per question**.\

* Submit the rendered file to **Canvas** and push it to your **GitHub repository**.\


* Provide the link to your GitHub repository in the **Canvas gradebook** as a text submission.\

ðŸ”¹ **Each problem is worth 10 points.**\

ðŸ”¹ You will receive an additional **20 points** if you correctly push your completed file to GitHub and make at least one commit for each question.\


**Good luck!**